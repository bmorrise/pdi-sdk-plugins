<!--===========================================================================
   Unpacks and reassembles the kettle sdk plugins into a single assembly.
   (This build file does not use subfloor.)
============================================================================-->
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="kettle-sdk-plugin-assembly" basedir="." default="default"> 
  
	<description>
	 Kettle sdk plugins single assembly.
	</description>  

	<property name="subfloor-ee.parent.file" value="subfloor-pkg.xml" />
	<import file="build-res/subfloor-ee.xml" />
	
  <property file="build.properties" />

  <property name="lib.dir" value="${basedir}/lib" />
  <property name="build.dir" value="${basedir}/build" />
  <property name="dist.dir" value="${basedir}/dist" />
  <property name="artifact.file.path" value="${dist.dir}/${ivy.artifact.id}-${project.revision}.zip" />
  <property name="package-res.dir" value="${basedir}/package-res" />
  
  <echo>"${dist.dir}</echo>
  
  <target name="default" depends="package" />

  <target name="init-ivy" >
    <mkdir dir="${dist.dir}" />    
          <path id="ivy.lib.path">
              <fileset dir="${user.home}/.subfloor/ivy" includes="*.jar"/>
          </path>
          <taskdef resource="org/apache/ivy/ant/antlib.xml"
          uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
  </target>
  
  <target name="clean">
    <delete dir="${lib.dir}" />
    <delete dir="${build.dir}" />
    <delete dir="${dist.dir}" />
  </target>
  
  
  <target name="resolve" depends="init-ivy">
    <ivy:retrieve pattern="${lib.dir}/[artifact]-[revision].zip" conf="default" />
  </target>
    
  <target name="prepare-artifacts" depends="resolve">
      <unzip dest="${build.dir}">
      <fileset dir="${lib.dir}">
              <include name="**/*.zip"/>
        </fileset>
      </unzip>
      <copy todir="${build.dir}">
        <fileset dir="${package-res.dir}"/>
      </copy>
  </target>

  <target name="package" depends="prepare-artifacts">
    <zip destfile="${artifact.file.path}" >
      <zipfileset dir="${basedir}/build" />
    </zip>
  </target>  
    

  <target name="publish-local" depends="package">
    <ivy:publish resolver="local" pubrevision="${project.revision}" overwrite="true" forcedeliver="true" warnonmissing="yes" haltonmissing="no">
      <artifacts pattern="${dist.dir}/[artifact]-[revision](-[classifier]).[ext]" />
    </ivy:publish>
  </target>
    
  <!-- Set the os property -->
  <condition property="isLinux">
    <os family="unix" />
  </condition>
  <condition property="isWindows">
    <os family="windows" />
  </condition>
  <condition property="isMac">
    <os family="mac" />
  </condition>

   <!-- Maven deploy commmand line conditional executors for Windows and not Windows -->
   <target name="publishWindows" if="isWindows">
     <echo message="Doing maven deploy for Windows..." />
            <exec executable="cmd" failonerror="true">
              <arg value="/c" />
              <arg value="mvn.bat" />
              <arg value="deploy:deploy-file" />
              <arg value="-DrepositoryId=${ivy.repository.id}" />
              <arg value="-Durl=${ivy.repository.publish}" />
              <arg value="-DgroupId=${ivy.artifact.group}" />
              <arg value="-DartifactId=${ivy.artifact.id}" />
              <arg value="-Dversion=${project.revision}" />
              <arg value="-Dpackaging=zip" />
              <arg value="-Dfile=${artifact.file.path}" />
              <arg value="-DgeneratePom=false" />
            </exec>
   </target>

   <target name="publishUnix" unless="isWin" >
     <echo message="Doing maven deploy for Nix..." />
            <exec executable="mvn" failonerror="true">
              <arg value="deploy:deploy-file" />
              <arg value="-DrepositoryId=${ivy.repository.id}" />
              <arg value="-Durl=${ivy.repository.publish}" />
              <arg value="-DgroupId=${ivy.artifact.group}" />
              <arg value="-DartifactId=${ivy.artifact.id}" />
              <arg value="-Dversion=${project.revision}" />
              <arg value="-Dpackaging=zip" />
              <arg value="-Dfile=${artifact.file.path}" />
              <arg value="-DgeneratePom=false" />
              <arg value="-e" />
            </exec>
   </target>
  
  <!-- Publish target to run the conditional deployment -->
  <target name="publish" depends="publishWindows, publishUnix, init-ivy">
  </target>

</project>
